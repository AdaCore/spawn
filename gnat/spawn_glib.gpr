--
--  Copyright (C) 2018-2023, AdaCore
--
--  SPDX-License-Identifier: Apache-2.0
--

with "gtkada";

library project Spawn_Glib is

   type OS_API_Kind is ("unix", "osx", "Windows_NT");
   OS_API : OS_API_Kind := external ("OS", "unix");

   type Library_Kind is ("static", "static-pic", "relocatable");
   Library_Type : Library_Kind :=
     external ("SPAWN_GLIB_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));

   type Spawn_Glib_Build_Kind is ("dev", "prod", "coverage");
   Build_Mode : Spawn_Glib_Build_Kind :=
     external ("SPAWN_GLIB_BUILD_MODE", external ("BUILD_MODE", "prod"));

   --  By default, treat warnings as errors in dev mode, but not in prod
   --  mode. Let users override this default using the SPAWN_WARN_ERRORS
   --  environment variable.

   type Any_Boolean is ("false", "true");
   Warnings_As_Errors : Any_Boolean := external ("SPAWN_WARN_ERRORS", "true");

   for Library_Kind use Library_Type;
   for Object_Dir   use "../.obj/spawn_glib/" & Library_Type;
   for Library_Dir  use "../.libs/spawn_glib/" & Library_Type;
   for Library_Name use "spawn_glib";
   for Source_Dirs use ("../source/spawn");
   for Languages use ("Ada", "c");

   case Library_Type is
      when "relocatable" =>
         for Library_Options use ("-lglib-2.0");
      when others =>
         null;
   end case;

   Common_Excluded :=
     ("spawn-internal-monitor.ads",
      "spawn-processes-monitor_loop.ads",
      "spawn-processes-monitor_loop.adb");

   case OS_API is
      when "unix" | "osx" =>
         for Excluded_Source_Files use Common_Excluded &
           ("spawn-windows_api.ads",
            "spawn-windows_api.adb",
            "spawn-internal-windows.ads",
            "spawn-internal-windows.adb");

      when "Windows_NT" =>
         for Excluded_Source_Files use Common_Excluded &
           ("spawn-channels__glib_posix.ads",
            "spawn-channels__glib_posix.adb",
	    "spawn-polls-posix_polls.ads",
	    "spawn-polls-posix_polls.adb",
            "pipe2.c",
            "posix_const.c");
   end case;

   Ada_Switches := ();
   Linker_Options := ();
   case Warnings_As_Errors is
      when "true"  => Ada_Switches := Ada_Switches & ("-gnatwe");
      when "false" => null;
   end case;

   case Build_Mode is
      when "prod" =>
         Ada_Switches := Ada_Switches & (
            --  Compile with optimizations
            "-O2",

            --  Generate debug information: this is useful to get meaningful
            --  tracebacks.
            "-g"
         );

      when "dev" =>
         Ada_Switches := Ada_Switches & (
            --  Compile with no optimization and with debug information to ease
            --  investigation in debuggers.
            "-O0", "-g",

            --  Enable all warnings and GNAT stylechecks (plus O: check for
            --  overriding indicators).
            "-gnatwa", "-gnatygO",

            --  Enable assertions and all validity checking options
            "-gnata", "-gnatVa",

            --  Enable stack overflow checks
            "-fstack-check"
         );

      when "coverage" =>
         Ada_Switches := Ada_Switches & (
            --  Compile with no optimization and with debug information to ease
            --  investigation in debuggers.
            "-O0", "-g",

            --  Enable coverage code instrumentation.
            "--coverage");

         Linker_Options := Linker_Options & ("--coverage");
   end case;

   package Compiler is
      for Switches ("ada") use Ada_Switches;
   end Compiler;

   package Linker is
      for Linker_Options use Linker_Options;
   end Linker;

   package Naming is
      case OS_API is
         when "unix" | "osx" =>
            for Spec ("Spawn.Channels")
               use "spawn-channels__glib_posix.ads";
            for Body ("Spawn.Channels")
               use "spawn-channels__glib_posix.adb";
            for Spec ("Spawn.Internal")
               use "spawn-internal__glib_posix.ads";
            for Body ("Spawn.Internal")
               use "spawn-internal__glib_posix.adb";
            for Body ("Spawn.Environments.Initialize_Default")
               use "spawn-environments-initialize_default__glib.adb";
            for Spec ("Spawn.Environments.Internal")
               use "spawn-environments-internal__glib.ads";
            for Body ("Spawn.Environments.Internal")
               use "spawn-environments-internal__glib.adb";
            for Body ("Spawn.Environments.Search_In_Path")
               use "spawn-environments-search_in_path__posix.adb";
         when "Windows_NT" =>
            for Spec ("Spawn.Internal")
               use "spawn-internal__glib_windows.ads";
            for Body ("Spawn.Internal")
               use "spawn-internal__glib_windows.adb";
            for Body ("Spawn.Environments.Initialize_Default")
               use "spawn-environments-initialize_default__windows.adb";
            for Spec ("Spawn.Environments.Internal")
               use "spawn-environments-internal__windows.ads";
            for Body ("Spawn.Environments.Internal")
               use "spawn-environments-internal__windows.adb";
            for Body ("Spawn.Environments.Search_In_Path")
               use "spawn-environments-search_in_path__windows.adb";
      end case;
   end Naming;

end Spawn_Glib;
